//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.4

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "account")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    #[sea_orm(unique)]
    pub name: String,
    #[sea_orm(column_type = "custom(\"enum_text\")")]
    pub account_type: String,
    pub currency_code: String,
    pub starting_balance: i64,
    pub created_at: DateTimeUtc,
    pub account_extra: Option<Json>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::currency::Entity",
        from = "Column::CurrencyCode",
        to = "super::currency::Column::Code",
        on_update = "Cascade",
        on_delete = "Restrict"
    )]
    Currency,
    #[sea_orm(has_many = "super::transaction_item::Entity")]
    TransactionItem,
}

impl Related<super::currency::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Currency.def()
    }
}

impl Related<super::transaction_item::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::TransactionItem.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
